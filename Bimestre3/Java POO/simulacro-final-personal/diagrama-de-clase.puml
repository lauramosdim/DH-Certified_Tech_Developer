@startuml diagrama-de-clase

!define DARK_PURPLE #59339D
!define LIGHT_PURPLE #CCB1FD

'General
hide circle
skinparam shadowing false
skinparam backgroundColor transparent
skinparam componentStyle uml2
skinparam dpi 300
skinparam RoundCorner 5
skinparam padding 2

'Default'
skinparam default {
  'Font Style
  FontColor Black
  FontName "Lucida Console"
  FontSize 12
  FontStyle plain
  MonospacedFontName "Lucida Console"
}

'Title (inherits from Default)
skinparam title {
  'Font Style (inherits from Default)
  FontSize 20
  FontColor LIGHT_PURPLE

  'Border Color
  BackgroundColor transparent
  BorderColor White
  BorderRoundCorner 0
  BorderThickness 0
}

'Arrow
skinparam arrow {
  'Font Style (inherits from Default)
  FontColor LIGHT_PURPLE
  FontSize 14

  'Color
  Color LIGHT_PURPLE
  LollipopColor Black
  Thickness 1
  MessageAlignment center
}

'Note
skinparam note {
  'Font Style
  FontColor Black
  FontSize 12
  FontStyle plain

  'Color
  BackgroundColor white
  BorderColor DARK_PURPLE
  BorderThickness 1
}

'Class
skinparam class {
  'Font Style (inherits from Default)
  FontSize 16
  StereotypeFontColor Black
  StereotypeFontSize 14
  StereotypeFontStyle plain

  'Color
  FontColor LIGHT_PURPLE
  BackgroundColor LIGHT_PURPLE
  HeaderBackgroundColor DARK_PURPLE
  BorderColor DARK_PURPLE
  BorderThickness 1

  'Attributions
  AttributeFontColor Black
  AttributeFontSize 12
  AttributeFontStyle plain
  AttributeIconSize 0
}

'Interface Class
skinparam interface {
  FontStyle italic
}

title Ofertas AcadÃ©micas

abstract class OfertaAcademica {
    - nombre : String
    - descripcion : String
    + {abstract} calcularPrecio() : double
    + {abstract} toString() : String
}

class Curso extends OfertaAcademica {
    - valorPorHora : double
    - duracionEnMeses : int
    - cargaHorariaMensual : int
    + calcularPrecio() : double
    + toString() : String
}

abstract class CompositeOfertasAcademicas extends OfertaAcademica {
    + {abstract} agregar(oferta : OfertaAcademica) : void
    + {abstract} eliminar(oferta : OfertaAcademica) : void
}

class ProgramaIntensivo extends CompositeOfertasAcademicas {
    - porcentajeBonificacion : double
    + calcularPrecio() : double
    + toString() : String
}

class Carrera extends CompositeOfertasAcademicas {
    - precioBase : double
    + calcularPrecio() : double
    + toString() : String
}

class Taller extends OfertaAcademica {
    - cantidadTPs : int
    - precioPorTP : double
    + calcularPrecio() : double
    + toString() : String
}

class Instituto {
    + generarInforme() : void
    + agregar(oferta : OfertaAcademica) : void
}

class FabricaDeOfertaAcademica {
    - {static} instancia : FabricaDeOfertaAcademica
    - FabricaDeOfertaAcademica()
    + {static} obtenerInstancia() : FabricaDeOfertaAcademica
    + {static} crearOfertaAcademica(tipo : String)
}

class CarreraCargaHorariaCursoException extends Exception

CompositeOfertasAcademicas "1" *-- "*" OfertaAcademica
Instituto "1" o-- "*" OfertaAcademica
FabricaDeOfertaAcademica ..> OfertaAcademica : crea
Carrera ..> CarreraCargaHorariaCursoException : throws

note bottom of Curso
    cargaHorariaMensual *
    duracionEnMeses *
    valorPorHora
end note

note bottom of ProgramaIntensivo
    sumatoria de los precios
    de todos los cursos
end note

note bottom of Taller
    cantidadTPs * precioPorTP
end note

note bottom of Carrera
    precioBase + sumatoria
    de todos los precios
end note

@enduml